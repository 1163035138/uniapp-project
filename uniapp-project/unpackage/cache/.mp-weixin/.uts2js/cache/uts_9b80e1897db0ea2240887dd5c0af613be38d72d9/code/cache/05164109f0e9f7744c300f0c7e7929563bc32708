{"code":"import { __awaiter } from \"tslib\";\nimport { defineComponent } from \"vue\";\n/**\n * waterfall 瀑布流\n * @description 这是一个瀑布流形式的组件，内容分为左右两列，结合uview的懒加载组件效果更佳。相较于某些只是奇偶数左右分别，或者没有利用vue作用域插槽的做法，uview的瀑布流实现了真正的 组件化，搭配LazyLoad 懒加载和loadMore 加载更多组件，让您开箱即用，眼前一亮。\n * @tutorial https://uview-plus.jiangruyi.com/components/waterfall.html\n * @property {Array} flow-list 用于渲染的数据\n * @property {String Number} add-time 单条数据添加到队列的时间间隔，单位ms，见上方注意事项说明（默认200）\n * @example <u-waterfall :flowList=\"flowList\"></u-waterfall>\n */\nimport { mpMixin } from '../../libs/mixin/mpMixin';\nimport { mixin } from '../../libs/mixin/mixin';\nexport default defineComponent({\n    name: \"u-waterfall\",\n    props: {\n        modelValue: {\n            // 瀑布流数据\n            type: Array,\n            required: true,\n            default: function () {\n                return [];\n            }\n        },\n        // 每次向结构插入数据的时间间隔，间隔越长，越能保证两列高度相近，但是对用户体验越不好\n        // 单位ms\n        addTime: {\n            type: [Number, String],\n            default: 200\n        },\n        // id值，用于清除某一条数据时，根据此idKey名称找到并移除，如数据为{idx: 22, name: 'lisa'}\n        // 那么该把idKey设置为idx\n        idKey: {\n            type: String,\n            default: 'id'\n        }\n    },\n    mixins: [mpMixin, mixin],\n    data() {\n        return {\n            leftList: [],\n            rightList: [],\n            tempList: [],\n            children: []\n        };\n    },\n    watch: {\n        copyFlowList(nVal = null, oVal = null) {\n            if (!nVal || nVal.length == 0) {\n                this.clear(false);\n                // uni.__f__('log','at uni_modules/uview-plus/components/u-waterfall/u-waterfall.vue:72','clear');\n            }\n            else {\n                // 取差值，即这一次数组变化新增的部分\n                let startIndex = Array.isArray(oVal) && oVal.length > 0 ? oVal.length : 0;\n                // 拼接上原有数据\n                this.tempList = this.tempList.concat(this.cloneData(nVal.slice(startIndex)));\n                this.splitData();\n            }\n        }\n    },\n    mounted() {\n        this.tempList = this.cloneData(this.copyFlowList);\n        this.splitData();\n    },\n    computed: {\n        // 破坏flowList变量的引用，否则watch的结果新旧值是一样的\n        copyFlowList() {\n            if (!this.modelValue || this.modelValue.length == 0) {\n                this.clear(false);\n                // uni.__f__('log','at uni_modules/uview-plus/components/u-waterfall/u-waterfall.vue:92','clear');\n                return [];\n            }\n            else {\n                return this.cloneData(this.modelValue);\n            }\n        }\n    },\n    emits: ['update:modelValue'],\n    methods: {\n        splitData() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!this.tempList.length)\n                    return Promise.resolve(null);\n                let leftRect = yield this.$uGetRect('#u-left-column');\n                let rightRect = yield this.$uGetRect('#u-right-column');\n                // 如果左边小于或等于右边，就添加到左边，否则添加到右边\n                let item = this.tempList[0];\n                // 解决多次快速上拉后，可能数据会乱的问题，因为经过上面的两个await节点查询阻塞一定时间，加上后面的定时器干扰\n                // 数组可能变成[]，导致此item值可能为undefined\n                if (!item)\n                    return Promise.resolve(null);\n                if (leftRect.height < rightRect.height) {\n                    this.leftList.push(item);\n                }\n                else if (leftRect.height > rightRect.height) {\n                    this.rightList.push(item);\n                }\n                else {\n                    // 这里是为了保证第一和第二张添加时，左右都能有内容\n                    // 因为添加第一张，实际队列的高度可能还是0，这时需要根据队列元素长度判断下一个该放哪边\n                    if (this.leftList.length <= this.rightList.length) {\n                        this.leftList.push(item);\n                    }\n                    else {\n                        this.rightList.push(item);\n                    }\n                }\n                // 移除临时列表的第一项\n                this.tempList.splice(0, 1);\n                // 如果临时数组还有数据，继续循环\n                if (this.tempList.length) {\n                    setTimeout(() => {\n                        this.splitData();\n                    }, this.addTime);\n                }\n            });\n        },\n        // 复制而不是引用对象和数组\n        cloneData(data = null) {\n            return UTS.JSON.parse(UTS.JSON.stringify(data));\n        },\n        // 清空数据列表\n        clear(bak = true) {\n            this.leftList = [];\n            this.rightList = [];\n            // 同时清除父组件列表中的数据\n            if (bak) {\n                this.$emit('update:modelValue', []);\n            }\n            this.tempList = [];\n        },\n        // 清除某一条指定的数据，根据id实现\n        remove(id = null) {\n            // 如果findIndex找不到合适的条件，就会返回-1\n            let index = -1;\n            index = this.leftList.findIndex(val => { return val[this.idKey] == id; });\n            if (index != -1) {\n                // 如果index不等于-1，说明已经找到了要找的id，根据index索引删除这一条数据\n                this.leftList.splice(index, 1);\n            }\n            else {\n                // 同理于上方面的方法\n                index = this.rightList.findIndex(val => { return val[this.idKey] == id; });\n                if (index != -1)\n                    this.rightList.splice(index, 1);\n            }\n            // 同时清除父组件的数据中的对应id的条目\n            index = this.modelValue.findIndex((val = null) => { return val[this.idKey] == id; });\n            if (index != -1)\n                this.$emit('update:modelValue', this.modelValue.splice(index, 1));\n        },\n        // 修改某条数据的某个属性\n        modify(id = null, key = null, value = null) {\n            // 如果findIndex找不到合适的条件，就会返回-1\n            let index = -1;\n            index = this.leftList.findIndex(val => { return val[this.idKey] == id; });\n            if (index != -1) {\n                // 如果index不等于-1，说明已经找到了要找的id，修改对应key的值\n                this.leftList[index][key] = value;\n            }\n            else {\n                // 同理于上方面的方法\n                index = this.rightList.findIndex(val => { return val[this.idKey] == id; });\n                if (index != -1)\n                    this.rightList[index][key] = value;\n            }\n            // 修改父组件的数据中的对应id的条目\n            index = this.modelValue.findIndex((val = null) => { return val[this.idKey] == id; });\n            if (index != -1) {\n                // 首先复制一份value的数据\n                let data = this.cloneData(this.modelValue);\n                // 修改对应索引的key属性的值为value\n                data[index][key] = value;\n                // 修改父组件通过v-model绑定的变量的值\n                this.$emit('update:modelValue', data);\n            }\n        }\n    }\n});\n//# sourceMappingURL=C:/Users/86150/Desktop/%E5%BC%A0%E4%BA%9A%E5%86%AC%E9%A1%B9%E7%9B%AE/uniapp-project/uni_modules/uview-plus/components/u-waterfall/u-waterfall.vue?vue&type=script&lang.uts.js.map","references":["C:/Users/86150/Desktop/张亚冬项目/uniapp-project/uni_modules/uview-plus/libs/mixin/mpMixin.js","C:/Users/86150/Desktop/张亚冬项目/uniapp-project/uni_modules/uview-plus/libs/mixin/mixin.js"],"uniExtApis":[],"map":"{\"version\":3,\"file\":\"u-waterfall.vue?vue&type=script&lang.uts.js\",\"sourceRoot\":\"\",\"sources\":[\"u-waterfall.vue?vue&type=script&lang.uts\"],\"names\":[],\"mappings\":\"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\"}"}
